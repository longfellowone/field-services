type Mutation {
    # Orders
    createOrder(input: CreateOrder!): Order!
    sendOrder(input: SendOrder!): Order!
    addOrderItem(input: AddOrderItem!): Order!
    removeOrderItem(input: RemoveOrderItem!): Order!
    receiveOrderItem(input: ModifyQuantity!): Order!
    modifyRequestedQuantity(input: ModifyQuantity!): Order!
    # Projects
    createProject(input: CreateProject!): Project!
    closeProject(input: CloseProject!): Project!
}

input CreateOrder {
    id: ID!
    projectID: String!
    name: String!
}

input SendOrder {
    id: ID!
}

input AddOrderItem {
    id: ID!
    productID: String!
    name: String!
    uom: String!
}

input RemoveOrderItem {
    id: ID!
    productID: String!
}

input ModifyQuantity {
    id: ID!
    productID: String!
    quantity: Int!
}

input CreateProject {
    id: ID!
    name: String!
}

input CloseProject {
    id: ID!
}

type Query {
    # Orders
    order(id: ID!): Order!
    projectOrders(id: ID!): [ProjectOrder!]!
    products(name: String!): [Result!]!
    # Projects
    projects(foremanID: ID!): [Project!]!
}

type Result {
    id: ID!
    name: String!
    uom: String!
    matchedIndexes: [Int!]!
}

type Product {
    id: ID!
    category: String!
    name: String!
    uom: String!
}

type ProjectOrder {
    id: ID!
    sentDate: Int!
    #    status: String!
}

type Order {
    id: ID!
    project: Project!
    items: [Item!]!
    sentDate: Int!
    comments: String!
    #    status: String!
}

type Item {
    id: ID!
    name: String!
    uom: String!
    quantityRequested: Int!
    quantityReceived: Int!
    quantityRemaining: Int!
    #    ItemStatus: ItemStatus!
    poNumber: String!
    dateAdded: Int!
}

type Project {
    id: ID!
    name: String!
    active: Boolean!
}

#enum ItemStatus {
#    Waiting
#    Filled
#    BackOrdered
#    OrderExceeded
#    NotOrdered
#}
